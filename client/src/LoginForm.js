import { Button, Form, Input } from 'antd';
import { useState } from 'react';
import { AuthService } from './services/auth.service';
import { useNavigate } from 'react-router-dom';

const validateMessages = {
    required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ!',
    string: { min: '–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤!' }
}

const authService = new AuthService();

function LoginForm(props) {
    const [isLogin, setIsLogin] = useState(true);
    const [authErrorMessage, setAuthErrorMessage] = useState('');
    const [form] = Form.useForm();
    const navigate = useNavigate();

    async function auth() {
        try {
            await form.validateFields();
            const values = form.getFieldsValue();
            const res = isLogin ? await authService.login(values) : await authService.register(values);
            if (res.success) {
                props.setCurrentUserInfo(res.userInfo);
                props.setIsLoggedIn();
                navigate('/'); // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            } else {
                setAuthErrorMessage(isLogin ? '–ù–µ –≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!' : '–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –µ—Å—Ç—å!');
            }
        } catch (err) {
            console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', err);
        }
    }

    function changeAuthType() {
        setAuthErrorMessage('');
        setIsLogin(!isLogin);
        form.resetFields();
    }

    async function repeatPasswordFieldValidation(formRecord) {
        const passwordField = formRecord.getFieldValue('password');
        const passwordRepeatField = formRecord.getFieldValue('passwordRepeat');
        if (passwordRepeatField && passwordField !== passwordRepeatField) {
            return Promise.reject('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
        }
        return Promise.resolve();
    }

    return (
        <>
            <div className='login-page'>
                <div className='login-form-wrapper'>
                    <h1>{isLogin ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h1>
                    <Form
                        labelAlign='left'
                        labelCol={{ span: 7 }}
                        wrapperCol={{ span: 18 }}
                        form={form}
                        validateMessages={validateMessages}
                    >
                        <Form.Item
                            label='–õ–æ–≥–∏–Ω'
                            name='login'
                            rules={[{ required: true }]}
                        >
                            <Input allowClear />
                        </Form.Item>
                        <Form.Item
                            label='–ü–∞—Ä–æ–ª—å'
                            name='password'
                            rules={[{ required: true, min: 8 }]}
                        >
                            <Input.Password allowClear />
                        </Form.Item>
                        {!isLogin && (
                            <Form.Item
                                label='–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è'
                                name='passwordRepeat'
                                rules={[
                                    { required: true },
                                    form => ({
                                        validator() {
                                            return repeatPasswordFieldValidation(form);
                                        }
                                    })
                                ]}
                            >
                                <Input.Password allowClear />
                            </Form.Item>
                        )}
                    </Form>
                    {authErrorMessage && <div className='auth-error-message'>{authErrorMessage}</div>}
                    <Button type='primary' style={{ width: 200 }} onClick={auth}>
                        {isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
                    </Button>
                    <p>
                        {isLogin ? '–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?ü§®' : '–ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –º–æ–∂–µ—Ç–µ –≤ –Ω–µ–≥–æ –≤–æ–π—Ç–∏ü§ìüëâ'}
                        <Button type='link' onClick={changeAuthType}>
                            {isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}
                        </Button>
                    </p>
                </div>
            </div>
        </>
    );
}

export default LoginForm;
